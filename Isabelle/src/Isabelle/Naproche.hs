{- generated by Isabelle -}

{-
Authors: Makarius (2021)

Constants for Isabelle/Naproche.
-}

{-# LANGUAGE OverloadedStrings #-}

module Isabelle.Naproche
where

import Isabelle.Bytes (Bytes)


-- options

naproche_prove, naproche_check, naproche_skipfail :: Bytes
naproche_prove = "naproche_prove"
naproche_check = "naproche_check"
naproche_skipfail = "naproche_skipfail"

naproche_pos_id, naproche_pos_file, naproche_pos_shift :: Bytes
naproche_pos_id = "naproche_pos_id"
naproche_pos_file = "naproche_pos_file"
naproche_pos_shift = "naproche_pos_shift"


-- message origin

origin_main, origin_export, origin_forthel, origin_parser,
  origin_reasoner, origin_simplifier, origin_thesis, origin_translate :: Bytes
origin_main = "Main"
origin_export = "Export"
origin_forthel = "ForTheL"
origin_parser = "Parser"
origin_reasoner = "Reasoner"
origin_simplifier = "Simplifier"
origin_thesis = "Thesis"
origin_translate = "Translation"


-- programs in Haskell
-- (see "$NAPROCHE_HOME/src/SAD/Main.hs")

cancel_program :: Bytes
cancel_program = "cancel"

forthel_program :: Bytes
forthel_program = "forthel"


-- commands in ML

threads_command :: Bytes
threads_command = "threads"

output_state_command, output_writeln_command, output_information_command,
  output_tracing_command, output_warning_command, output_legacy_feature_command,
  output_error_command, output_report_command :: Bytes
output_state_command = "output_state"
output_writeln_command = "output_writeln"
output_information_command = "output_information"
output_tracing_command = "output_tracing"
output_warning_command = "output_warning"
output_legacy_feature_command = "output_legacy_feature"
output_error_command = "output_error"
output_report_command = "output_report"


-- prover server
-- (see "$NAPROCHE_HOME/Isabelle/src/scala/prover_server.scala")

prover_args :: Bytes
prover_args = "prover_args"

prover_command :: Bytes
prover_command = "prover"

prover_name :: Bytes
prover_name = "name"

prover_timeout :: Bytes
prover_timeout = "timeout"

prover_result :: Bytes
prover_result = "result"

prover_return_code :: Bytes
prover_return_code = "return_code"

kill_command :: Bytes
kill_command = "kill"
